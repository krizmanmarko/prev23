fun getChar():char;
fun putChar(c:int):void;
fun exit():void;

var string : [10]char;

fun get(s:^char, i:int):char = {
	(((s:int) + (i * 8)):^char)^
};

fun nl():void = {
	putChar(10)
};

# does not accept 0 as int
fun printNumRec(num:int):void = {
	if num != 0 then {
		printNumRec(num / 10);
		putChar(('0':int) + num % 10)
	}
};

fun printNum(num:int):void = {
	if num == 0 then
		putChar(('0':int))
	else
		printNumRec(num)
};

fun print(s:^char):void = {
	if (s != (nil : ^char)) then {
		let var i:int; in {
			i = 0;
			while get(s, i) != (0:char) do {
				putChar((get(s, i):int));
				i = i + 1
			}
		}
	}
};

var global_var:int;

fun printNumBig(n: int): void = {
    let var buff: [32]char, i: int; in {
        i = 0;

        if (n < 0) then {
            n = -n;
            putChar(('-': int))
        };

        buff[i] = (('0':int) + (n % 10) : char);
        n = n / 10;

        while (n != 0) do {
            i = i + 1;
            buff[i] = (('0':int) + (n % 10) : char);
            n = n / 10
        };

        while (i >= 0) do {
            putChar((buff[i]: int));
            i = i - 1
        };

        nl();

        none
    }
};

fun modify_gvar():void = {
	global_var = 65
};

fun f1():int = 1;
fun fn(i:int):int = i;

fun bigTest():int = {
	global_var = 123456789 + fn(-123456790);
	printNumBig(global_var);

	#global_var = -global_var;
	#printNumBig(global_var);

	#modify_gvar();
	#printNumBig(global_var);

	global_var
};

fun factorial(n: int): int = {
    let
        var fac: int;
    in {
        if n == 1 then
            fac = 1
        else
            fac = n * factorial(n - 1);
        fac
    }
},
runFactorial(): int = {

    let
        var i: int;
    in {
        i = 1;
        while i <= 10 do {
            printNum(i);
            putChar((':':int));
            putChar((' ':int));
            printNum(factorial(i));
            putChar(10);
            i = i + 1
        }
    };
    0
};


fun main():int= {
	printNumBig(1 + fn(-10));
	0
};
