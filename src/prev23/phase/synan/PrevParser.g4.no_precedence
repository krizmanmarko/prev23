parser grammar PrevParser;

@header {

	package prev23.phase.synan;
	
	import java.util.*;
	
	import prev23.common.report.*;
	import prev23.phase.lexan.*;
	
}

options{
    tokenVocab=PrevLexer;
}


source
  : declarations EOF
  ;

declarations
  : (type_declarations | function_declarations | variable_declarations)+
  ;

type_declarations
  : TYP ID EQUAL type (COMMA ID EQUAL type)* SEMICOLON
  ;

function_declarations
  : FUN ID LPAR (ID COLON type (COMMA ID COLON type)*)? RPAR COLON type
        (EQUAL statement)?
    (COMMA ID LPAR (ID COLON type (COMMA ID COLON type)*)? RPAR COLON type
        (EQUAL statement)?)* SEMICOLON
  ;

variable_declarations
  : VAR ID COLON type (COMMA ID COLON type)* SEMICOLON
  ;

type
  : VOID | CHAR | INT | BOOL | ID
  | LBRACKET expression RBRACKET type
  | CARON type
  | LBRACE ID COLON type (COMMA ID COLON type)* RBRACE
  | LPAR type RPAR
  ;

expression
  : VOID_CONST | BOOL_CONST | INT_CONST | CHAR_CONST | STRING_CONST | PTR_CONST
  | ID (LPAR (expression (COMMA expression)*)? RPAR)?
  | expression (LBRACKET expression RBRACKET | CARON | DOT ID)
  | unary_operator expression
  | expression binary_operator expression
  | LPAR expression (COLON type)? RPAR
  | NEW LPAR type RPAR | DEL LPAR expression RPAR
  ;

statement
  : expression (EQUAL expression)?
  | IF expression THEN statement (ELSE statement)?
  | WHILE expression DO statement
  | LET declarations IN statement
  | LBRACE statement (SEMICOLON statement)* RBRACE
  ;

unary_operator
  : EXCLAM | PLUS | MINUS | CARON
  ;

binary_operator
  : PIPE | AMPERSAND | EQ | NE | LT | GT | LE | GE | ASTERISK | SLASH | PERCENT
  | PLUS | MINUS
  ;


////// NO PRECEDENCE OR ASSOCIATIVITY YET
