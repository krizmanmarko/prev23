parser grammar PrevParser;

@header {

	package prev23.phase.synan;
	
	import java.util.*;
	
	import prev23.common.report.*;
	import prev23.phase.lexan.*;

	import prev23.data.ast.attribute.*;
	import prev23.data.ast.tree.decl.*;
	import prev23.data.ast.tree.expr.*;
	import prev23.data.ast.tree.type.*;
	import prev23.data.ast.tree.stmt.*;
	import prev23.data.ast.tree.*;
	import prev23.data.ast.visitor.*;
}

@members {

	private Location loc(Token tok) {
		return new Location((prev23.data.sym.Token) tok);
	}

	private Location loc(Locatable loc) {
		return new Location(loc);
	}

	private Location loc(Token tok1, Token tok2) {
		return new Location((prev23.data.sym.Token) tok1,
				    (prev23.data.sym.Token) tok2);
	}

	private Location loc(Token tok1, Locatable loc2) {
		return new Location((prev23.data.sym.Token) tok1, loc2);
	}

	private Location loc(Locatable loc1, Token tok2) {
		return new Location(loc1, (prev23.data.sym.Token) tok2);
	}

	private Location loc(Locatable loc1, Locatable loc2) {
		return new Location(loc1, loc2);
	}
}

options{
    tokenVocab=PrevLexer;
}

source
  returns [AstTrees<AstDecl> ast]
  : declarations EOF { $ast = new AstTrees<AstDecl>("hah"); }
  ;

declarations
  : type_declarations declarations_1
  | function_declarations declarations_1
  | variable_declarations declarations_1
  ;

declarations_1
  : type_declarations declarations_1
  | function_declarations declarations_1
  | variable_declarations declarations_1
  |
  ;

type_declarations
  : TYP ID EQUAL type type_declarations_1 SEMICOLON
  ;

type_declarations_1
  : COMMA ID EQUAL type type_declarations_1
  |
  ;

function_declarations
  : FUN ID LPAR function_declarations_1 SEMICOLON
  ;

function_declarations_1
  : ID COLON type function_declarations_2
  | function_declarations_2
  ;

function_declarations_2
  : COMMA ID COLON type function_declarations_2
  | RPAR COLON type function_declarations_3
  ;

function_declarations_3
  : EQUAL statement function_declarations_4
  | function_declarations_4
  ;

function_declarations_4
  : COMMA ID LPAR function_declarations_1
  |
  ;

variable_declarations
  : VAR ID COLON type variable_declarations_1 SEMICOLON
  ;

variable_declarations_1
  : COMMA ID COLON type variable_declarations_1
  |
  ;

type
  : VOID
  | CHAR
  | INT
  | BOOL
  | ID
  | LBRACKET expression RBRACKET type
  | CARON type
  | LBRACE ID COLON type type_1 RBRACE
  | LPAR type RPAR
  ;

type_1
  : COMMA ID COLON type type_1
  |
  ;

// relational operators - non-associative
// other operators - left associative

disjunctive_operator
  : PIPE
  ;

conjunctive_operator
  : AMPERSAND
  ;

relational_operator
  : EQ
  | NE
  | LT
  | GT
  | LE
  | GE
  ;

additive_operator
  : PLUS
  | MINUS
  ;

multiplicative_operator
  : ASTERISK
  | SLASH
  | PERCENT
  ;

prefix_operator
  : EXCLAM
  | PLUS
  | MINUS
  | CARON
  ;

postfix_operator
  : LBRACKET expression RBRACKET
  | CARON
  | DOT ID
  ;

expression
  : disjunctive_expression
  ;

disjunctive_expression
  : conjunctive_expression disjunctive_expression_1
  ;

disjunctive_expression_1
  : disjunctive_operator conjunctive_expression disjunctive_expression_1
  |
  ;

conjunctive_expression
  : relational_expression conjunctive_expression_1
  ;

conjunctive_expression_1
  : conjunctive_operator relational_expression conjunctive_expression_1
  |
  ;

// different associativity than others
relational_expression
  : additive_expression relational_expression_1
  ;

relational_expression_1
  : relational_operator additive_expression
  |
  ;

additive_expression
  : multiplicative_expression additive_expression_1
  ;

additive_expression_1
  : additive_operator multiplicative_expression additive_expression_1
  |
  ;

multiplicative_expression
  : prefix_expression multiplicative_expression_1
  ;

multiplicative_expression_1
  : multiplicative_operator prefix_expression multiplicative_expression_1
  |
  ;

prefix_expression
  : prefix_operator prefix_expression
  | postfix_expression
  ;

postfix_expression
  : final_expression postfix_expression_1
  ;

postfix_expression_1
  : postfix_operator postfix_expression_1
  |
  ;

final_expression
  : VOID_CONST
  | BOOL_CONST
  | INT_CONST
  | CHAR_CONST
  | STRING_CONST
  | PTR_CONST
  | ID final_expression_1
  | LPAR expression final_expression_4
  | NEW LPAR type RPAR
  | DEL LPAR expression RPAR
  ;

final_expression_1
  : LPAR final_expression_2 RPAR
  |
  ;

final_expression_2
  : expression final_expression_3 
  |
  ;

final_expression_3
  : COMMA expression final_expression_3
  |
  ;

final_expression_4
  : COLON type
  |
  ;

statement
  : expression statement_1
  | IF expression THEN statement statement_2
  | WHILE expression DO statement
  | LET declarations IN statement
  | LBRACE statement statement_3 RBRACE
  ;

statement_1
  : EQUAL expression
  |
  ;

statement_2
  : ELSE statement
  |
  ;

statement_3
  : SEMICOLON statement statement_3
  |
  ;
